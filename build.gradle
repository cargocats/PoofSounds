plugins {
	id "fabric-loom" version "1.10-SNAPSHOT"
	id "maven-publish"
	id "com.modrinth.minotaur" version "2.+"
}

def envFile = file(".env")
def env = [:]

if (envFile.exists()) {
	envFile.eachLine { line ->
		def matcher = line =~ /^\s*([\w.-]+)\s*=\s*(.*)\s*$/
		if (matcher.matches()) {
			def key = matcher[0][1]
			def value = matcher[0][2].replaceAll(/^["']|["']$/, "")
			env[key] = value
		}
	}
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		name "Xander Maven"
		url "https://maven.isxander.dev/releases"
	}

	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"poofsound" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// YACL and Mod Menu
	modImplementation "dev.isxander:yet-another-config-lib:${project.yacl_version}"
	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

modrinth {
	token = env["MODRINTH_TOKEN"]
	projectId = "poof-sounds-fabric"
	versionNumber = "1.3.1"
	versionName = "Poof Sounds " + modrinth.getVersionNumber().get() + " for Minecraft 1.21.1 Fabric"
	versionType = "release"
	uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
	gameVersions = ["1.21.1"]
	loaders = ["fabric"]
	changelog = rootProject.file("changelog.md").text
	dependencies {
		required.project "fabric-api"
		optional.version "yacl", "3.6.6+1.21.1-fabric"
	}
	syncBodyFrom = rootProject.file("README.md").text
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)